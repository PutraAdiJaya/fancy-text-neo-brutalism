console.log('Sidebar script loading...');

const vscode = acquireVsCodeApi();

console.log('VS Code API acquired');

const src = document.getElementById('src');
const gen = document.getElementById('gen');
const clearBtn = document.getElementById('clear');
const insertBtn = document.getElementById('insert');
const results = document.getElementById('results');

console.log('DOM elements retrieved:', { src: !!src, gen: !!gen, clearBtn: !!clearBtn, insertBtn: !!insertBtn, results: !!results });

// receive prefill from extension
window.addEventListener('message', (event) => {
  console.log('Message received:', event.data);
  const msg = event.data;
  if (msg?.type === 'prefill') {
    console.log('Prefill message received:', msg.text);
    src.value = msg.text || '';
    doGenerate();
  }
});

// live update on typing (debounced)
let t;
src.addEventListener('input', () => {
  console.log('Input event triggered');
  clearTimeout(t);
  t = setTimeout(doGenerate, 120);
});

gen.addEventListener('click', () => {
  console.log('Generate button clicked');
  doGenerate();
});

clearBtn.addEventListener('click', () => {
  console.log('Clear button clicked');
  src.value='';
  results.innerHTML='';
});

insertBtn.addEventListener('click', () => {
  console.log('Insert button clicked');
  const first = results.querySelector('.variant');
  if (first) {
    vscode.postMessage({ type: 'insert', text: first.textContent || '' });
  }
});

function doGenerate(){
  console.log('doGenerate called');
  try {
    const text = src.value || '';
    console.log('Text to generate:', text);
    if (!text.trim()) { 
      results.innerHTML = ''; 
      return; 
    }
    const items = generateAll(text);
    console.log('Generated items:', items.length);
    render(items);
  } catch (e) {
    console.error('Error in doGenerate:', e);
    results.innerHTML = `<div style="color: red;">Error: ${e.message}</div>`;
  }
}

function render(items){
  console.log('Render called with items:', items.length);
  try {
    results.innerHTML = '';
    for (const it of items){
      const card = document.createElement('div');
      card.className = 'card';

      const top = document.createElement('div');
      top.className = 'top';

      const p = document.createElement('div');
      p.className = 'variant';
      p.textContent = it.text;
      // click on the text itself also copies
      p.title = 'Click to copy';
      p.addEventListener('click', () => {
        console.log('Variant clicked:', it.text);
        vscode.postMessage({ type: 'copy', text: it.text });
      });

      const act = document.createElement('div');

      const btnCopy = document.createElement('button');
      btnCopy.className = 'copy';
      btnCopy.textContent = 'Copy';
      btnCopy.addEventListener('click', () => {
        console.log('Copy button clicked:', it.text);
        vscode.postMessage({ type: 'copy', text: it.text });
      });

      const btnIns = document.createElement('button');
      btnIns.className = 'insert';
      btnIns.textContent = 'Insert';
      btnIns.addEventListener('click', () => {
        console.log('Insert button clicked:', it.text);
        vscode.postMessage({ type: 'insert', text: it.text });
      });

      act.appendChild(btnCopy); act.appendChild(btnIns);
      top.appendChild(p); top.appendChild(act);

      const meta = document.createElement('div');
      meta.className = 'meta';
      meta.textContent = it.label;

      card.appendChild(top);
      card.appendChild(meta);
      results.appendChild(card);
    }
    console.log('Render completed');
  } catch (e) {
    console.error('Error in render:', e);
    results.innerHTML = `<div style="color: red;">Render Error: ${e.message}</div>`;
  }
}

// ==== Variant generators ====
function mapWithSet(input, set) { 
  console.log('mapWithSet called');
  return Array.from(input).map((ch) => set[ch] ?? ch).join(''); 
}

function buildSet(toStartCaps, toStartLow){
  console.log('buildSet called');
  const set = {}; 
  for (let i=0;i<26;i++){ 
    set[String.fromCharCode(65+i)] = String.fromCodePoint(toStartCaps+i); 
    set[String.fromCharCode(97+i)] = String.fromCodePoint(toStartLow+i);
  } 
  return set;
}

console.log('Initializing character sets...');
const MATH_BOLD=buildSet(0x1D400,0x1D41A), MATH_ITALIC=buildSet(0x1D434,0x1D44E), MATH_BOLDITALIC=buildSet(0x1D468,0x1D482), MATH_SCRIPT=buildSet(0x1D49C,0x1D4B6), MATH_BOLDSCRIPT=buildSet(0x1D4D0,0x1D4EA), FRAKTUR=buildSet(0x1D504,0x1D51E), BOLD_FRAKTUR=buildSet(0x1D56C,0x1D586), SANS=buildSet(0x1D5A0,0x1D5BA), SANS_BOLD=buildSet(0x1D5D4,0x1D5EE), SANS_ITALIC=buildSet(0x1D608,0x1D622), SANS_BOLDITALIC=buildSet(0x1D63C,0x1D656), MONO=buildSet(0x1D670,0x1D68A);
const FULLWIDTH = (()=>{ const s={}; for(let i=0;i<26;i++){ s[String.fromCharCode(65+i)] = String.fromCodePoint(0xFF21+i); s[String.fromCharCode(97+i)] = String.fromCodePoint(0xFF41+i);} for(let i=0;i<10;i++){ s[String.fromCharCode(48+i)] = String.fromCodePoint(0xFF10+i);} s[' ']=' '; return s; })();
const SMALLCAPS = (()=>{ const m={a:'·¥Ä',b:' ô',c:'·¥Ñ',d:'·¥Ö',e:'·¥á',f:'Íú∞',g:'…¢',h:' ú',i:'…™',j:'·¥ä',k:'·¥ã',l:' ü',m:'·¥ç',n:'…¥',o:'·¥è',p:'·¥ò',q:'«´',r:' Ä',s:'s',t:'·¥õ',u:'·¥ú',v:'·¥†',w:'·¥°',x:'x',y:' è',z:'·¥¢'}; const s={}; for(let i=0;i<26;i++){ const up=String.fromCharCode(65+i); const lo=String.fromCharCode(97+i); s[up]=up; s[lo]=m[lo]||up;} return s; })();
const UPSIDE = (()=>{ const p={'a':'…ê','b':'q','c':'…î','d':'p','e':'«ù','f':'…ü','g':'∆É','h':'…•','i':'·¥â','j':'…æ','k':' û','l':'◊ü','m':'…Ø','n':'u','o':'o','p':'d','q':'b','r':'…π','s':'s','t':' á','u':'n','v':' å','w':' ç','x':'x','y':' é','z':'z','A':'‚àÄ','B':'êêí','C':'∆Ü','D':'p','E':'∆é','F':'‚Ñ≤','G':'◊§','H':'H','I':'I','J':'≈ø','K':' û','L':'À•','M':'W','N':'N','O':'O','P':'‘Ä','Q':'Œå','R':'·¥ö','S':'S','T':'‚î¥','U':'‚à©','V':'Œõ','W':'M','X':'X','Y':'‚ÖÑ','Z':'Z','?':'¬ø','!':'¬°','[':']',']':'[','(' :')',')':'(' ,'{':'}','}': '{','<':'>','>':'<','_':'‚Äæ'}; const s={}; for(const k in p) s[k]=p[k]; return s; })();
const STRIKE=(s)=>{ console.log('STRIKE called'); return Array.from(s).map(ch=>ch+'\u0336').join(''); }
const UNDER=(s)=>{ console.log('UNDER called'); return Array.from(s).map(ch=>ch+'\u0332').join(''); }
const OVER=(s)=>{ console.log('OVER called'); return Array.from(s).map(ch=>ch+'\u0305').join(''); }
const BOX_EACH=(s)=>Array.from(s).map(ch=>`„Äê${ch}„Äë`).join('');
const CORNER_EACH=(s)=>Array.from(s).map(ch=>`„Äé${ch}„Äè`).join('');
const WRAP_CAKE=(s)=>`üç∞ üéÄ ${s} üéÄ üç∞`;
const WRAP_SPARKLE=(s)=>`‚ú® ‚ãÜ üåü ${s} üåü ‚ãÜ ‚ú®`;
const WRAP_KAOMOJI=(s)=>`(„Å£‚óî‚ó°‚óî)„Å£ ‚ô• ${s} ‚ô•`;

function superscriptish(s){
  console.log('superscriptish called');
  const m={'0':'‚Å∞','1':'¬π','2':'¬≤','3':'¬≥','4':'‚Å¥','5':'‚Åµ','6':'‚Å∂','7':'‚Å∑','8':'‚Å∏','9':'‚Åπ','a':'·µÉ','b':'·µá','c':'·∂ú','d':'·µà','e':'·µâ','f':'·∂†','g':'·µç','h':' ∞','i':'·∂¶','j':' ≤','k':'·µè','l':'À°','m':'·µê','n':'‚Åø','o':'·µí','p':'·µñ','q':'·ë´','r':' ≥','s':'À¢','t':'·µó','u':'·µò','v':'·µõ','w':' ∑','x':'À£','y':' ∏','z':'·∂ª','A':'·¥¨','B':'·¥Æ','C':'·∂ú','D':'·¥∞','E':'·¥±','F':'·∂†','G':'·¥≥','H':'·¥¥','I':'·¥µ','J':'·¥∂','K':'·¥∑','L':'·¥∏','M':'·¥π','N':'·¥∫','O':'·¥º','P':'·¥æ','Q':'Q','R':'·¥ø','S':'À¢','T':'·µÄ','U':'·µÅ','V':'‚±Ω','W':'·µÇ','X':'À£','Y':' ∏','Z':'·∂ª'}; 
  return Array.from(s).map(ch=>m[ch]??ch).join('');
}

function subscriptish(s){
  console.log('subscriptish called');
  const m={'0':'‚ÇÄ','1':'‚ÇÅ','2':'‚ÇÇ','3':'‚ÇÉ','4':'‚ÇÑ','5':'‚ÇÖ','6':'‚ÇÜ','7':'‚Çá','8':'‚Çà','9':'‚Çâ','a':'‚Çê','e':'‚Çë','h':'‚Çï','i':'·µ¢','j':'‚±º','k':'‚Çñ','l':'‚Çó','m':'‚Çò','n':'‚Çô','o':'‚Çí','p':'‚Çö','r':'·µ£','s':'‚Çõ','t':'‚Çú','u':'·µ§','v':'·µ•','x':'‚Çì'}; 
  return Array.from(s).map(ch=>m[ch]??ch).join('');
}

function generateAll(s){
  console.log('generateAll called with:', s);
  try {
    const items=[]; 
    const push=(label,text)=>items.push({label,text});
    push('ùêåùêöùê≠ùê° ùêÅùê®ùê•ùêù', mapWithSet(s, MATH_BOLD));
    push('ùëÄùëéùë°‚Ñé ùêºùë°ùëéùëôùëñùëê', mapWithSet(s, MATH_ITALIC));
    push('ùëÄùëéùë°‚Ñé ùêÅùê®ùê•ùêù ùêºùë°ùëéùëôùëñùëê', mapWithSet(s, MATH_BOLDITALIC));
    push('ùì¢ùì¨ùìªùì≤ùìπùìΩ', mapWithSet(s, MATH_SCRIPT));
    push('ùì¢ùì¨ùìªùì≤ùìπùìΩ ùêÅùê®ùê•ùêù', mapWithSet(s, MATH_BOLDSCRIPT));
    push('ùîâùîØùîûùî®ùî±ùî≤ùîØ', mapWithSet(s, FRAKTUR));
    push('ùï≠ùñîùñëùñâ ùîâùîØùîûùî®ùî±ùî≤ùîØ', mapWithSet(s, BOLD_FRAKTUR));
    push('ùó¶ùóÆùóªùòÄ', mapWithSet(s, SANS));
    push('ùó¶ùóÆùóªùòÄ ùêÅùê®ùê•ùêù', mapWithSet(s, SANS_BOLD));
    push('ùó¶ùóÆùóªùòÄ ùêºùë°ùëéùëôùëñùëê', mapWithSet(s, SANS_ITALIC));
    push('ùó¶ùóÆùóªùòÄ ùêÅùê®ùê•ùêù ùêºùë°ùëéùëôùëñùëê', mapWithSet(s, SANS_BOLDITALIC));
    push('ùôºùöòùöóùöòùöúùöôùöäùöåùöé', mapWithSet(s, MONO));
    push('Ôº¶ÔΩïÔΩåÔΩåÔΩóÔΩâÔΩÑÔΩîÔΩà', mapWithSet(s, FULLWIDTH));
    push('S·¥ç·¥Ä ü ü ·¥Ñ·¥Ä·¥òs', mapWithSet(s, SMALLCAPS));
    push('·µó·µòÀ¢·µò·µñ ·∂¶À¢ ∞', superscriptish(s));
    push('‚Çõ·µ§·µ¶·µ¢‚Çõ‚Çï', subscriptish(s));
    push('Upside Down', Array.from(s).reverse().map(ch=>UPSIDE[ch]??ch).join(''));
    push('Strike', STRIKE(s));
    push('Underline', UNDER(s));
    push('Overline', OVER(s));
    push('„ÄêBox Each„Äë', BOX_EACH(s));
    push('„ÄéCorner Each„Äè', CORNER_EACH(s));
    push('üç∞üéÄ Wrapper', WRAP_CAKE(s));
    push('‚ú®üåü Wrapper', WRAP_SPARKLE(s));
    push('(‚óî‚ó°‚óî) Wrapper', WRAP_KAOMOJI(s));
    console.log('generateAll completed with items:', items.length);
    return items;
  } catch (e) {
    console.error('Error in generateAll:', e);
    return [{label: 'Error', text: 'Failed to generate text variants'}];
  }
}

// initial render
console.log('Calling initial doGenerate');
doGenerate();
console.log('Sidebar script loaded successfully');